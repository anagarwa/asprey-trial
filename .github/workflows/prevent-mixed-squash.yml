name: Prevent Mixed Changes on PR

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
    branches:
      - dev

jobs:
  check-commons-folder:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all commit history so we can compare across commits

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Check for changes in 'commons/' folder
        run: |
          # Check for changes in the commons/ folder in the current PR
          commons_changes=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep '^commons/' || true)

          # Debug output for commons_changes
          echo "Changes in commons/ folder in current PR:"
          echo "$commons_changes"

          if [ -n "$commons_changes" ]; then
            pr_body="${{ github.event.pull_request.body }}"
            commons_pr_url=$(echo "$pr_body" | grep -oE 'https://github\.com/anagarwa/first-helix-website/pull/[0-9]+')

            if [ -n "$commons_pr_url" ]; then
              echo "Commons repo PR link found: $commons_pr_url"
              commons_pr_number=$(echo "$commons_pr_url" | grep -oE '[0-9]+$')

              # Clone the commons repo using SSH
              git clone git@github.com:anagarwa/first-helix-website.git commons-repo
              cd commons-repo

              # Fetch the changes in the commons PR directly
              git fetch origin pull/$commons_pr_number/head:commons-pr-branch
              git checkout commons-pr-branch

              # Get the changes from the commons repo PR directly (no filtering for commons/)
              commons_repo_diff=$(git diff --name-only origin/main commons-pr-branch || true)

              # Debug output for commons_repo_diff
              echo "Changes in commons repo PR:"
              echo "$commons_repo_diff"

              cd ..

              # Remove the 'commons/' prefix from commons_changes for comparison
              stripped_commons_changes=$(echo "$commons_changes" | sed 's|^commons/||')

              # Trim whitespace and sort both lists
              stripped_commons_changes_sorted=$(echo "$stripped_commons_changes" | sed 's/^[ \t]*//;s/[ \t]*$//' | sort)
              commons_repo_diff_sorted=$(echo "$commons_repo_diff" | sed 's/^[ \t]*//;s/[ \t]*$//' | sort)

              # Debug output for stripped and sorted changes
              echo "Stripped and sorted commons changes:"
              echo "$stripped_commons_changes_sorted"
              echo "Sorted changes in commons repo PR:"
              echo "$commons_repo_diff_sorted"

              # Compare the sorted changes
              if diff <(echo "$commons_repo_diff_sorted") <(echo "$stripped_commons_changes_sorted") >/dev/null; then
                echo "Changes in commons repo PR match the changes in the commons/ folder."
              else
                # Output the changes when they do not match
                echo "Error: Changes in commons repo PR do not match the changes in the commons/ folder of this PR."
                echo "Changes in commons folder:"
                echo "$commons_changes"
                echo "Changes in commons repo PR:"
                echo "$commons_repo_diff"
                exit 1
              fi
            else
              echo "Error: Changes in 'commons/' folder detected, but no link to commons repo PR found."
              exit 1
            fi
          fi
